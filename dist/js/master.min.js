var master=function(){function a(){$("#btnLoadHotels").click(t)}function e(){$(".ToggleReviews").click(r)}function t(){var a,t=$("#Results");$.get("http://fake-hotel-api.herokuapp.com/api/hotels?count=5",function(i){$(t).html(""),$.each(i,function(e,i){a=s(i),$(t).append(a)}),e()}).fail(function(e){var s=JSON.parse(e.responseText).error;a=i(s),$(t).html(a)})}function s(a){return"<article id="+a.id+" class='HotelItem'><div class='ContentHost'><div class='HotelImage' style='background-image: url("+a.images[0]+")'><img alt='Image of "+a.name+"' src='"+a.images[0]+"'/></div><div class='HotelInfoWrapper'><header class='ItemHeader'><div class='HotelMainInfo'><h1 class='HotelName'>"+a.name+"</h1><h2 class='Location'>"+a.city+" - "+a.country+"</h2></div><div class='Rating'><span class='StarsAsText'>"+a.stars+"*</span>"+n(a.stars)+"</div></header><p class='Description'>"+a.description+"</p><footer class='ItemFooter'><div class='PriceAndDate'><p class='OfferPrice'>"+a.price+" &euro;</p><p class='OfferDate'>"+o(a.date_start)+" - "+o(a.date_end)+"</p></div><div class='ButtonHost'><button type='button' class='Btn ToggleReviews' data-id='"+a.id+"' data-action='show'>Show reviews</button></div></footer></div></div></aticle>"}function i(a){return"<article class='ErrorMessageHost'><h3 class='ErrorMessage'><span class='ErrorMessageIcon fa fa-exclamation-triangle' aria-hidden='true'></span><span class='ErrorMessageText'>"+a+"</span></h3></article>"}function n(a){var e=5-a,t="";for(star=0;star<a;star++)t+="<span class='Star fa fa-star' aria-hidden='true'></span>";for(star=0;star<e;star++)t+="<span class='Blank fa fa-star-o' aria-hidden='true'></span>";return t}function o(a){var e=new Date(a);return e.getDate()+"."+(e.getMonth()+1)+"."+e.getFullYear()}function r(){var a=$(this).data("action"),e=$(this).data("id"),t=$("#"+e);if("show"===a){$(this).data("action","hide").text("Hide reviews"),$(t).append("<div class='ReviewsHost'></div>");var s=$(t).find(".ReviewsHost");$.get("http://fake-hotel-api.herokuapp.com/api/reviews?hotel_id="+e,function(a){var e;$.each(a,function(a,t){e=c(t),$(s).append(e)})})}else $(t).find(".ReviewsHost").remove(),$(this).data("action","show").text("Show reviews")}function c(a){var e=a.positive?"plus":"minus";return"<section class='ReviewItem "+e+"'><div class='Mood'><span class='MoodIcon fa fa-"+e+"'></span></div><div class='Content'><h3 class='ReviewerName'>"+a.name+"</h3><p class='ReviewComment'>"+a.comment+"</p></div></section>"}return{init:function(){a()}}}();$(function(){master.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
